// middlewares/roleMiddleware.js
const ROLES = {
    SUPERADMIN: 'Superadmin',
    ADMIN: 'Admin',
    EDITOR: 'Editor',
    VENDEDOR: 'Vendedor',
    TECNICO: 'Tecnico',
    GUEST: 'Guest',
  };
  
  module.exports = ROLES;  

/*
  ‚úÖ Recomendaci√≥n General para Roles (valores de strings):
Contexto	Ejemplo recomendado	Justificaci√≥n
Almacenamiento en DB / backend / l√≥gica interna	'admin', 'tecnico', 'superadmin'	‚úÖ Min√∫sculas: consistentes, f√°ciles de comparar (role === 'admin'), evitan errores de casing.
Display en frontend (lo que ve el usuario)	'Admin', 'T√©cnico', 'Superadmin'	‚úÖ Capitalizado: se ve bien para el usuario. Se puede transformar con toTitleCase si hace falta.
Constantes en c√≥digo	ROLES.ADMIN = 'admin'	‚úÖ May√∫sculas para claves (como constantes), valores en min√∫sculas.
*/

/*
üîê Las claves (ADMIN) se usan como constantes internas.

üì¶ Los valores ('admin') se almacenan en la DB y se usan para comparar.

üñº En el frontend, transform√°s esos valores para mostrar algo como 'Admin' o 'T√©cnico' si quer√©s.
*/

/*
Para que puedas mantener consistencia en los roles y migrar los existentes a min√∫sculas en tu base de datos MongoDB, 
aqu√≠ te dejo el script que deber√≠as ejecutar (por ejemplo, en MongoDB Compass o una terminal con acceso a tu base de datos):
db.users.updateMany({ role: "Superadmin" }, { $set: { role: "superadmin" } });
db.users.updateMany({ role: "Admin" }, { $set: { role: "admin" } });
db.users.updateMany({ role: "Editor" }, { $set: { role: "editor" } });
db.users.updateMany({ role: "Vendedor" }, { $set: { role: "vendedor" } });
db.users.updateMany({ role: "Tecnico" }, { $set: { role: "tecnico" } });
db.users.updateMany({ role: "Guest" }, { $set: { role: "guest" } });
db.users.updateMany({ role: "TECNICO" }, { $set: { role: "tecnico" } });
db.users.updateMany({ role: "ADMIN" }, { $set: { role: "admin" } });
*/
